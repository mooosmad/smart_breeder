import 'package:get/get.dart';
import 'package:flutter/material.dart';
import 'package:smart_breeder/data/models/chat_message_model.dart';
import 'package:smart_breeder/data/models/animal_model.dart';
import 'package:smart_breeder/data/services/database_helper.dart';
import 'package:smart_breeder/data/services/gemini_service.dart';
import 'package:smart_breeder/data/services/voice_service.dart';
import 'package:smart_breeder/controllers/animal_controller.dart';

class ChatController extends GetxController {
  final DatabaseHelper _dbHelper = Get.find<DatabaseHelper>();
  final GeminiService _geminiService = Get.find<GeminiService>();
  final VoiceService _voiceService = Get.find<VoiceService>();
  final AnimalController _animalController = Get.find<AnimalController>();

  final TextEditingController messageController = TextEditingController();
  final ScrollController scrollController = ScrollController();

  final RxList<ChatMessageModel> messages = <ChatMessageModel>[].obs;
  final RxBool isTyping = false.obs;
  final RxBool isListening = false.obs;
  final RxBool isRecording = false.obs; // Nouvel √©tat pour l'enregistrement
  final RxBool isSpeaking = false.obs; // Nouvel √©tat pour la synth√®se vocale
  final RxString selectedAnimalContext = ''.obs;
  final RxString recordingStatus = ''.obs; // Status de l'enregistrement
  final RxDouble recordingVolume = 0.0.obs; // Volume du micro (optionnel)

  // Prompt syst√®me am√©lior√© pour SmartBreeder
  final String systemPrompt = '''
Vous √™tes SmartBreeder Assistant, un expert en sant√© animale et gestion d'√©levage. Votre r√¥le est d'aider les √©leveurs √†:
1. Comprendre les protocoles v√©t√©rinaires (vaccins, traitements)
2. Planifier les soins pr√©ventifs
3. Optimiser les d√©penses li√©es √† l'√©levage
4. Identifier les risques sanitaires
5. Fournir des conseils adapt√©s au type d'animal et √† la r√©gion

R√®gles de base:
- Soyez clair, concis et utilisez un langage accessible
- Fournissez des informations v√©rifi√©es par des v√©t√©rinaires
- Demandez des pr√©cisions si n√©cessaire (type/nombre d'animaux, r√©gion, saison)
- Pour les questions complexes, proposez de connecter avec un expert
- Mentionnez toujours les risques potentiels et les signes d'alerte
- Proposez des solutions √©conomiques quand possible

Format des r√©ponses:
1. R√©ponse directe √† la question
2. Informations compl√©mentaires utiles
3. Suggestions d'actions (si applicable)
4. Rappel des prochains soins √† pr√©voir (si pertinent)

R√©ponds en markdown pour la mise en forme (titres, listes, gras, etc.).
''';

  @override
  void onInit() {
    super.onInit();
    loadChatHistory();
    
    // √âcoute des changements d'√©tat vocal
    ever(_voiceService.isListening, (bool listening) {
      isListening.value = listening;
      if (listening) {
        isRecording.value = true;
        recordingStatus.value = "üé§ Parlez maintenant...";
      } else {
        isRecording.value = false;
        recordingStatus.value = "";
      }
    });
  }

  Future<void> loadChatHistory() async {
    try {
      messages.value = await _dbHelper.getChatMessages();
      _scrollToBottom();
    } catch (e) {
      print('Erreur chargement historique chat: $e');
    }
  }

  Future<void> sendMessage(String text, {bool isVoiceMessage = false}) async {
    if (text.trim().isEmpty) return;

    // Arr√™ter la synth√®se vocale si en cours
    if (isSpeaking.value) {
      stopSpeaking();
    }

    final userMessage = ChatMessageModel(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      message: text.trim(),
      sender: 'user',
      timestamp: DateTime.now(),
      isVoiceMessage: isVoiceMessage,
      animalContext: selectedAnimalContext.value.isNotEmpty
          ? selectedAnimalContext.value
          : null,
    );

    messages.add(userMessage);
    await _dbHelper.insertChatMessage(userMessage);

    messageController.clear();
    _scrollToBottom();

    await _generateAIResponse(text);
  }

  Future<void> _generateAIResponse(String userMessage) async {
    isTyping.value = true;

    try {
      AnimalModel? animalContext;
      if (selectedAnimalContext.value.isNotEmpty) {
        animalContext = _animalController.animals
            .firstWhereOrNull((animal) => animal.id.toString() == selectedAnimalContext.value);
      }

      // Utilisation du prompt syst√®me am√©lior√©
      final response = await _geminiService.generateVeterinaryAdvice(
        userMessage,
        animalContext: animalContext,
        customSystemPrompt: systemPrompt,
      );

      final aiMessage = ChatMessageModel(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        message: response,
        sender: 'ai',
        timestamp: DateTime.now(),
        animalContext: selectedAnimalContext.value.isNotEmpty
            ? selectedAnimalContext.value
            : null,
      );

      messages.add(aiMessage);
      await _dbHelper.insertChatMessage(aiMessage);

      // Synth√®se vocale automatique avec indicateur
      await startSpeaking(response);

    } catch (e) {
      final errorMessage = ChatMessageModel(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        message: 'D√©sol√©, je ne peux pas r√©pondre pour le moment. V√©rifiez votre connexion internet.',
        sender: 'ai',
        timestamp: DateTime.now(),
      );

      messages.add(errorMessage);
      await _dbHelper.insertChatMessage(errorMessage);
    } finally {
      isTyping.value = false;
      _scrollToBottom();
    }
  }

  Future<void> startVoiceInput() async {
    try {
      // Arr√™ter la synth√®se vocale si en cours
      if (isSpeaking.value) {
        stopSpeaking();
      }

      isRecording.value = true;
      recordingStatus.value = "üé§ Initialisation...";
      
      // Feedback haptique
      // HapticFeedback.lightImpact(); // D√©commentez si disponible
      
      final spokenText = await _voiceService.startListening();
      
      if (spokenText != null && spokenText.isNotEmpty) {
        recordingStatus.value = "‚úÖ Message re√ßu";
        await Future.delayed(const Duration(milliseconds: 500)); // Petit d√©lai pour le feedback
        await sendMessage(spokenText, isVoiceMessage: true);
      } else {
        recordingStatus.value = "‚ùå Aucun message d√©tect√©";
        await Future.delayed(const Duration(milliseconds: 1500));
      }
    } catch (e) {
      recordingStatus.value = "‚ùå Erreur d'enregistrement";
      
      String errorMessage = 'Impossible d\'utiliser la reconnaissance vocale';
      
      // Messages d'erreur plus sp√©cifiques
      if (e.toString().contains('timeout')) {
        errorMessage = 'Temps d\'√©coute √©coul√©. R√©essayez.';
      } else if (e.toString().contains('permission')) {
        errorMessage = 'Permission microphone requise';
      } else if (e.toString().contains('network')) {
        errorMessage = 'Connexion internet requise';
      }
      
      Get.snackbar(
        'Erreur Vocale',
        errorMessage,
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red[100],
        colorText: Colors.red[800],
        duration: const Duration(seconds: 3),
        icon: const Icon(Icons.mic_off, color: Colors.red),
      );
      
      await Future.delayed(const Duration(milliseconds: 1500));
    } finally {
      isRecording.value = false;
      recordingStatus.value = "";
    }
  }

  void stopVoiceInput() {
    _voiceService.stopListening();
    isRecording.value = false;
    recordingStatus.value = "";
  }

  Future<void> startSpeaking(String text) async {
    try {
      isSpeaking.value = true;
      await _voiceService.speak(text);
    } catch (e) {
      print('Erreur synth√®se vocale: $e');
    } finally {
      isSpeaking.value = false;
    }
  }

  void stopSpeaking() {
    _voiceService.stopSpeaking();
    isSpeaking.value = false;
  }

  void setAnimalContext(String? animalId) {
    selectedAnimalContext.value = animalId ?? '';
  }

  String getAnimalContextName() {
    if (selectedAnimalContext.value.isEmpty) return 'G√©n√©ral';

    final animal = _animalController.animals
        .firstWhereOrNull((a) => a.id.toString() == selectedAnimalContext.value);

    return animal != null
        ? '${animal.type} (${animal.count})'
        : 'Animal s√©lectionn√©';
  }

  Future<void> clearHistory() async {
    try {
      await _dbHelper.clearChatHistory();
      messages.clear();
      Get.snackbar('Succ√®s', 'Historique effac√©');
    } catch (e) {
      Get.snackbar('Erreur', 'Impossible d\'effacer l\'historique');
    }
  }

  void _scrollToBottom() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (scrollController.hasClients) {
        scrollController.animateTo(
          scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  // Suggestions de questions rapides
  List<String> get quickQuestions => [
        "Comment pr√©venir les maladies chez mes poules ?",
        "Quel est le bon moment pour vacciner ?",
        "Mon animal refuse de manger, que faire ?",
        "Comment am√©liorer la ponte de mes poules ?",
        "Quels sont les signes d'une maladie ?",
        "Comment calculer le co√ªt de l'alimentation ?",
      ];

  void sendQuickQuestion(String question) {
    sendMessage(question);
  }

  @override
  void onClose() {
    messageController.dispose();
    scrollController.dispose();
    super.onClose();
  }
}